"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../../utils");
/**
 * This executor builds an executable using the `go build` command.
 *
 * @param options options passed to the executor
 * @param context context passed to the executor
 */
function runExecutor(options, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return (0, utils_1.executeCommand)(buildParams(options, context), {
            cwd: context.cwd,
            env: options.env,
            executable: buildExecutable(options.compiler),
        });
    });
}
exports.default = runExecutor;
const buildParams = (options, context) => {
    var _a;
    return [
        'build',
        '-o',
        buildOutputPath((0, utils_1.extractProjectRoot)(context), options.outputPath),
        ...(0, utils_1.buildStringFlagIfValid)('-buildmode', options.buildMode),
        ...((_a = options.flags) !== null && _a !== void 0 ? _a : []),
        options.main,
    ];
};
/**
 * Builds the output path of the executable based on the project root.
 *
 * @param projectRoot project root
 * @param customPath custom path to use first
 */
const buildOutputPath = (projectRoot, customPath) => {
    const extension = process.platform === 'win32' ? '.exe' : '';
    return (customPath !== null && customPath !== void 0 ? customPath : `dist/${projectRoot}`) + extension;
};
/**
 * Determines the executable command based on the provided compiler.
 *
 * @param compiler - The compiler to use, which can be either 'tinygo' or 'go'.
 * @returns The executable command as a string, either 'tinygo' or 'go'.
 */
const buildExecutable = (compiler) => (compiler === 'tinygo' ? 'tinygo' : undefined);
//# sourceMappingURL=executor.js.map