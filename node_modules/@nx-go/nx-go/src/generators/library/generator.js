"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultTargets = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const utils_1 = require("../../utils");
exports.defaultTargets = {
    test: {
        executor: '@nx-go/nx-go:test',
    },
    lint: {
        executor: '@nx-go/nx-go:lint',
    },
};
function libraryGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = yield (0, utils_1.normalizeOptions)(tree, schema, 'library', '@nx-go/nx-go:library');
        const projectConfiguration = {
            root: options.projectRoot,
            name: options.projectName,
            projectType: options.projectType,
            sourceRoot: options.projectRoot,
            tags: options.parsedTags,
            targets: exports.defaultTargets,
        };
        (0, devkit_1.addProjectConfiguration)(tree, options.name, projectConfiguration);
        (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, 'files'), options.projectRoot, Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.projectName)));
        if ((0, utils_1.isGoWorkspace)(tree)) {
            (0, utils_1.createGoMod)(tree, options.projectRoot, options.projectRoot);
            (0, utils_1.addGoWorkDependency)(tree, options.projectRoot);
            projectConfiguration.targets.tidy = {
                executor: '@nx-go/nx-go:tidy',
            };
            (0, devkit_1.updateProjectConfiguration)(tree, options.name, projectConfiguration);
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.default = libraryGenerator;
//# sourceMappingURL=generator.js.map