"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
/**
 * Update executor options to ensure a smooth transition to v3.
 *
 * @param tree the project tree
 */
function update(tree) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(tree);
        for (const [projectName, projectConfig] of projects) {
            let shouldUpdate = false;
            if (!projectConfig.targets)
                continue;
            for (const target of Object.values(projectConfig.targets)) {
                // lint executor: args (string) -> args (array)
                if (target.executor === '@nx-go/nx-go:lint' &&
                    target.options &&
                    'args' in target.options &&
                    typeof target.options['args'] === 'string') {
                    target.options['args'] = target.options['args'].split(' ');
                    shouldUpdate = true;
                }
                // serve executor: arguments (array) -> args (array)
                if (target.executor === '@nx-go/nx-go:serve' &&
                    target.options &&
                    'arguments' in target.options) {
                    target.options['args'] = target.options['arguments'];
                    delete target.options['arguments'];
                    shouldUpdate = true;
                }
                // test executor: skipCover -> cover ; skipRace -> race ; add verbose
                if (target.executor === '@nx-go/nx-go:test') {
                    (_a = target.options) !== null && _a !== void 0 ? _a : (target.options = {});
                    const oldOptions = Object.assign({}, target.options);
                    toggleOption(target.options, 'skipCover', 'cover');
                    toggleOption(target.options, 'skipRace', 'race');
                    target.options['verbose'] = true;
                    if (JSON.stringify(oldOptions) !== JSON.stringify(target.options)) {
                        shouldUpdate = true;
                    }
                }
            }
            if (shouldUpdate) {
                (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfig);
            }
        }
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = update;
const toggleOption = (options, skipName, name) => {
    if (skipName in options && options[skipName]) {
        delete options[name];
    }
    else {
        options[name] = true;
    }
    delete options[skipName];
};
//# sourceMappingURL=update-executors-options.js.map