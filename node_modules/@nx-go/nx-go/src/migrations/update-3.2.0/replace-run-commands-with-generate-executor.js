"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const generateCommand = 'go generate';
/**
 * Use nx-go generate executor in projects using a
 * "run-commands" target for generating code.
 *
 * @note This migration only supports the most basic use case.
 * @param tree the project tree
 */
function update(tree) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(tree);
        for (const [projectName, projectConfig] of projects) {
            if (!projectConfig.targets)
                continue;
            const goGenerateTarget = getGoGenerateTarget(projectConfig);
            if (goGenerateTarget != null) {
                const command = (_a = goGenerateTarget[1].options) === null || _a === void 0 ? void 0 : _a.command;
                const args = (_b = command === null || command === void 0 ? void 0 : command.replace(generateCommand, '').trim()) !== null && _b !== void 0 ? _b : '';
                projectConfig.targets[goGenerateTarget[0]] = {
                    executor: '@nx-go/nx-go:generate',
                    options: args.length > 0 ? { args: args.split(' ') } : undefined,
                };
                (0, devkit_1.updateProjectConfiguration)(tree, projectName, projectConfig);
            }
        }
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = update;
const getGoGenerateTarget = (projectConfig) => 
// do not detect shorthand target because the command needs to be executed in the project directory
Object.entries(projectConfig.targets).find(([, target]) => {
    var _a;
    return target.executor === 'nx:run-commands' &&
        target.options != null &&
        Object.keys(target.options).length === 2 &&
        ((_a = target.options.command) === null || _a === void 0 ? void 0 : _a.startsWith(generateCommand)) &&
        (target.options.cwd === projectConfig.root ||
            target.options.cwd === '{projectRoot}');
});
//# sourceMappingURL=replace-run-commands-with-generate-executor.js.map