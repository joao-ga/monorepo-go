"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildStringFlagIfValid = exports.buildFlagIfEnabled = exports.executeCommand = exports.extractProjectRoot = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
/**
 * Extract the project root from the executor context.
 *
 * @param context the executor context
 */
const extractProjectRoot = (context) => context.projectsConfigurations.projects[context.projectName].root;
exports.extractProjectRoot = extractProjectRoot;
/**
 * Execute and log a command, then return the result to executor.
 *
 * @param parameters the parameters of the command
 * @param options the options of the command
 */
const executeCommand = (parameters = [], options = {}) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const { executable = 'go', cwd = null, env = {} } = options;
        devkit_1.logger.info(`Executing command: ${[executable, ...parameters].join(' ')}`);
        (0, child_process_1.execSync)([executable, ...parameters].join(' '), {
            cwd,
            env: Object.assign(process.env, env),
            stdio: [0, 1, 2],
        });
        return { success: true };
    }
    catch (error) {
        devkit_1.logger.error(error);
        return { success: false };
    }
});
exports.executeCommand = executeCommand;
/**
 * Add a flag to an array of parameter if it is enabled.
 *
 * @param flag the flag to add
 * @param enabled true if flag should be added
 */
const buildFlagIfEnabled = (flag, enabled) => enabled ? [flag] : [];
exports.buildFlagIfEnabled = buildFlagIfEnabled;
/**
 * Add a string flag to an array of parameter if it is valid.
 *
 * @param flag the flag to add
 * @param value the value of the flag
 */
const buildStringFlagIfValid = (flag, value) => (value ? [`${flag}=${value}`] : []);
exports.buildStringFlagIfValid = buildStringFlagIfValid;
//# sourceMappingURL=execute-command.js.map